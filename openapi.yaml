openapi: 3.0.3
info:
  title: Unified API Gateway - Arizona@Work Check-In System
  version: 1.0.0
  description: OpenAPI specification for the Unified API Gateway, which serves as a single entry point for AI agents to interact with various backend API functionalities of the Arizona@Work Check-In System.
servers:
  - url: https://seazwf.com/api/gateway
    description: Production Unified API Gateway
tags:
  - name: Gateway
    description: Main operations for the Unified API Gateway.
  - name: Checkins
    description: Operations related to client check-ins and notes.
  - name: Allocations
    description: Operations related to budget and grant allocations.
  - name: Forum
    description: Operations related to forum posts and discussions.
  - name: Clients
    description: Operations related to client management.
  - name: Reports
    description: Operations for generating system reports.
paths:
  /index.php:
    post:
      tags:
        - Gateway
        - Checkins
        - Allocations
        - Forum
        - Clients
        - Reports
      summary: Process an agent request via the Unified API Gateway
      description: >
        Accepts an 'action' and 'params' to interact with various backend services.
        The specific 'params' required and 'data' returned depend on the 'action' provided.
      operationId: processGatewayRequest
      security:
        - AgentApiKeyBearerAuth: []
      requestBody:
        description: Request payload for the gateway, structure depends on the 'action'.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/FetchCheckinDetailsRequest'
                - $ref: '#/components/schemas/QueryCheckinsRequest'
                - $ref: '#/components/schemas/AddCheckinNoteRequest'
                - $ref: '#/components/schemas/QueryAllocationsRequest'
                - $ref: '#/components/schemas/CreateForumPostRequest'
                - $ref: '#/components/schemas/GenerateReportsRequest'
                - $ref: '#/components/schemas/ReadAllForumPostsRequest'
                - $ref: '#/components/schemas/ReadRecentForumPostsRequest'
                - $ref: '#/components/schemas/FetchClientDetailsRequest'
                - $ref: '#/components/schemas/QueryClientsRequest'
      responses:
        '200':
          description: Successful response from the gateway. The structure of the 'data' field depends on the action performed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySuccessResponse'
        '400':
          description: Bad Request (e.g., invalid action, missing or invalid parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayErrorResponse'
        '401':
          description: Unauthorized (e.g., invalid or missing API key).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayErrorResponse'
        '403':
          description: Forbidden (e.g., API key lacks permission for the requested action).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayErrorResponse'
components:
  securitySchemes:
    AgentApiKeyBearerAuth:
      type: http
      scheme: bearer
      description: Agent API Key using Bearer token authentication. The token should be the dedicated API key for the agent (e.g., "Bearer <agent_api_key>").
  schemas:
    # Generic Schemas (as requested)
    GatewayRequest:
      type: object
      properties:
        action:
          type: string
          description: The specific action to be performed by the gateway.
        params:
          type: object
          description: Parameters for the action. Structure varies based on the 'action'.
          additionalProperties: true
      required:
        - action

    GatewaySuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
          description: Indicates the outcome of the request.
        data:
          oneOf:
            - $ref: '#/components/schemas/CheckinDetails'
            - $ref: '#/components/schemas/CheckinList'
            - $ref: '#/components/schemas/CheckinNoteConfirmation'
            - $ref: '#/components/schemas/AllocationList'
            - $ref: '#/components/schemas/ForumPostConfirmation'
            - $ref: '#/components/schemas/ReportData'
            - $ref: '#/components/schemas/ForumPostList'
            - $ref: '#/components/schemas/ClientDetails'
            - $ref: '#/components/schemas/ClientList'
          description: The data payload of the response. Structure depends on the action.
          nullable: true
        message:
          type: string
          description: An optional message providing more details about the success.
          nullable: true
      required:
        - status

    GatewayErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
          description: Indicates the outcome of the request.
        error:
          $ref: '#/components/schemas/ErrorObject'
      required:
        - status
        - error

    ErrorObject:
      type: object
      properties:
        code:
          type: string
          example: "INVALID_ACTION"
          description: A machine-readable error code.
        message:
          type: string
          example: "The specified action is not supported."
          description: A human-readable error message.
        details:
          type: object
          description: Optional additional details about the error (e.g., validation errors).
          additionalProperties: true
          nullable: true
      required:
        - code
        - message

    # Action-Specific Request Schemas (for requestBody.oneOf)
    FetchCheckinDetailsRequest:
      type: object
      description: Request to fetch details for a specific check-in.
      properties:
        action:
          type: string
          enum: [fetchCheckinDetails]
        params:
          $ref: '#/components/schemas/FetchCheckinDetailsParams'
      required: [action, params]

    QueryCheckinsRequest:
      type: object
      description: Request to query a list of check-ins based on filters.
      properties:
        action:
          type: string
          enum: [queryCheckins]
        params:
          $ref: '#/components/schemas/QueryCheckinsParams'
      required: [action] # params can be empty for queryCheckins

    AddCheckinNoteRequest:
      type: object
      description: Request to add a note to a specific check-in.
      properties:
        action:
          type: string
          enum: [addCheckinNote]
        params:
          $ref: '#/components/schemas/AddCheckinNoteParams'
      required: [action, params]

    QueryAllocationsRequest:
      type: object
      description: Request to query a list of allocations based on filters.
      properties:
        action:
          type: string
          enum: [queryAllocations]
        params:
          $ref: '#/components/schemas/QueryAllocationsParams'
      required: [action] # params can be empty

    CreateForumPostRequest:
      type: object
      description: Request to create a new forum post.
      properties:
        action:
          type: string
          enum: [createForumPost]
        params:
          $ref: '#/components/schemas/CreateForumPostParams'
      required: [action, params]

    GenerateReportsRequest:
      type: object
      description: Request to generate a report.
      properties:
        action:
          type: string
          enum: [generateReports]
        params:
          $ref: '#/components/schemas/GenerateReportsParams'
      required: [action, params]

    ReadAllForumPostsRequest:
      type: object
      description: Request to read all forum posts, optionally filtered.
      properties:
        action:
          type: string
          enum: [readAllForumPosts]
        params:
          $ref: '#/components/schemas/ReadAllForumPostsParams'
      required: [action] # params can be empty

    ReadRecentForumPostsRequest:
      type: object
      description: Request to read recent forum posts.
      properties:
        action:
          type: string
          enum: [readRecentForumPosts]
        params:
          $ref: '#/components/schemas/ReadRecentForumPostsParams'
      required: [action] # params can be empty

    FetchClientDetailsRequest:
      type: object
      description: Request to fetch details for a specific client.
      properties:
        action:
          type: string
          enum: [fetchClientDetails]
        params:
          $ref: '#/components/schemas/FetchClientDetailsParams'
      required: [action, params]

    QueryClientsRequest:
      type: object
      description: Request to query a list of clients based on filters.
      properties:
        action:
          type: string
          enum: [queryClients]
        params:
          $ref: '#/components/schemas/QueryClientsParams'
      required: [action] # params can be empty

    # Action-Specific Params Schemas
    FetchCheckinDetailsParams:
      type: object
      properties:
        checkin_id:
          type: string
          description: ID of the check-in to retrieve.
          example: "chk_123abc"
      required: [checkin_id]

    QueryCheckinsParams:
      type: object
      properties:
        site_id:
          type: string
          description: Filter by site ID.
          example: "site_001"
          nullable: true
        start_date:
          type: string
          format: date
          description: Filter by check-ins on or after this date (YYYY-MM-DD).
          example: "2023-01-01"
          nullable: true
        end_date:
          type: string
          format: date
          description: Filter by check-ins on or before this date (YYYY-MM-DD).
          example: "2023-01-31"
          nullable: true
        client_id:
          type: string
          description: Filter by client ID.
          example: "cli_456def"
          nullable: true
        status:
          type: string
          description: Filter by check-in status.
          enum: [active, completed, cancelled]
          nullable: true
        limit:
          type: integer
          format: int32
          description: Maximum number of records to return.
          default: 20
          minimum: 1
          nullable: true
        offset:
          type: integer
          format: int32
          description: Number of records to skip for pagination.
          default: 0
          minimum: 0
          nullable: true

    AddCheckinNoteParams:
      type: object
      properties:
        checkin_id:
          type: string
          description: ID of the check-in to add the note to.
          example: "chk_123abc"
        note_text:
          type: string
          description: The content of the note.
          example: "Client requires follow-up."
        user_id:
          type: string
          description: Optional ID of the user/agent adding the note, if different from authenticated agent.
          example: "staff_789"
          nullable: true
      required: [checkin_id, note_text]

    QueryAllocationsParams:
      type: object
      properties:
        grant_id:
          type: string
          description: Filter by grant ID.
          example: "grant_xyz"
          nullable: true
        department_id:
          type: string
          description: Filter by department ID.
          example: "dept_abc"
          nullable: true
        start_date:
          type: string
          format: date
          description: Filter by allocations on or after this date (YYYY-MM-DD).
          nullable: true
        end_date:
          type: string
          format: date
          description: Filter by allocations on or before this date (YYYY-MM-DD).
          nullable: true
        limit:
          type: integer
          format: int32
          description: Maximum number of records to return.
          default: 20
          minimum: 1
          nullable: true
        offset:
          type: integer
          format: int32
          description: Number of records to skip for pagination.
          default: 0
          minimum: 0
          nullable: true

    CreateForumPostParams:
      type: object
      properties:
        topic_id:
          type: string
          description: ID of the forum topic to post in.
          example: "topic_gen_discussion"
        title:
          type: string
          description: Title of the new forum post.
          example: "New Training Opportunity"
        content:
          type: string
          description: Content of the new forum post.
          example: "Details about the upcoming workshop..."
        user_id:
          type: string
          description: Optional ID of the user on whose behalf the agent is posting.
          example: "user_client_123"
          nullable: true
      required: [topic_id, title, content]

    GenerateReportsParams:
      type: object
      properties:
        report_type:
          type: string
          description: Type of report to generate.
          enum: [checkin_summary, client_activity, allocation_summary, forum_activity, site_usage]
          example: "checkin_summary"
        start_date:
          type: string
          format: date
          description: Start date for the report period (YYYY-MM-DD).
          example: "2023-01-01"
        end_date:
          type: string
          format: date
          description: End date for the report period (YYYY-MM-DD).
          example: "2023-01-31"
        site_id:
          type: string
          description: Optional site ID to filter the report.
          example: "site_001"
          nullable: true
        department_id:
          type: string
          description: Optional department ID for allocation reports.
          nullable: true
        grant_id:
          type: string
          description: Optional grant ID for allocation reports.
          nullable: true
        filters:
          type: object
          description: Additional key-value pairs for report-specific filters.
          additionalProperties: true
          nullable: true
          example: {"service_type": "resume_workshop"}
      required: [report_type, start_date, end_date]

    ReadAllForumPostsParams:
      type: object
      properties:
        topic_id:
          type: string
          description: Filter posts by topic ID.
          example: "topic_jobs"
          nullable: true
        user_id:
          type: string
          description: Filter posts by author (user ID).
          example: "user_staff_456"
          nullable: true
        limit:
          type: integer
          format: int32
          description: Maximum number of posts to return.
          default: 20
          minimum: 1
          nullable: true
        offset:
          type: integer
          format: int32
          description: Number of posts to skip for pagination.
          default: 0
          minimum: 0
          nullable: true

    ReadRecentForumPostsParams:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          description: Number of recent posts to return.
          default: 5
          minimum: 1
          maximum: 50
          nullable: true
        topic_id:
          type: string
          description: Optional topic ID to get recent posts from.
          example: "topic_announcements"
          nullable: true

    FetchClientDetailsParams:
      type: object
      properties:
        client_id:
          type: string
          description: ID of the client to retrieve.
          example: "cli_789ghi"
      required: [client_id]

    QueryClientsParams:
      type: object
      properties:
        first_name:
          type: string
          description: Filter by client's first name (partial match).
          nullable: true
        last_name:
          type: string
          description: Filter by client's last name (partial match).
          nullable: true
        email:
          type: string
          description: Filter by client's email address (exact match).
          nullable: true
        status:
          type: string
          description: Filter by client status.
          enum: [active, inactive, pending_verification]
          nullable: true
        site_id:
          type: string
          description: Filter by client's registered site ID.
          nullable: true
        limit:
          type: integer
          format: int32
          description: Maximum number of records to return.
          default: 20
          minimum: 1
          nullable: true
        offset:
          type: integer
          format: int32
          description: Number of records to skip for pagination.
          default: 0
          minimum: 0
          nullable: true

    # Action-Specific Data Schemas (for GatewaySuccessResponse.data.oneOf)
    CheckinDetails:
      type: object
      description: Detailed information about a single check-in.
      properties:
        checkin_id: { type: string, example: "chk_123" }
        client_id: { type: string, example: "cli_456" }
        client_name: { type: string, example: "John Doe" }
        site_id: { type: string, example: "site_789" }
        site_name: { type: string, example: "Downtown Office" }
        checkin_time: { type: string, format: date-time, example: "2023-10-26T10:00:00Z" }
        checkout_time: { type: string, format: date-time, nullable: true, example: "2023-10-26T11:30:00Z" }
        status: { type: string, enum: [active, completed, cancelled], example: "active" }
        purpose_of_visit: { type: string, example: "Job search assistance" }
        services_received: { type: array, items: { type: string }, example: ["Resume review", "Workshop enrollment"] }
        notes: { type: array, items: { $ref: '#/components/schemas/CheckinNote' } }
      required: [checkin_id, client_id, client_name, site_id, site_name, checkin_time, status, purpose_of_visit]

    CheckinNote:
      type: object
      description: A note associated with a check-in.
      properties:
        note_id: { type: string, example: "note_abc" }
        note_text: { type: string, example: "Client was very engaged." }
        created_by_user_id: { type: string, example: "user_xyz", description: "ID of the staff member or agent who added the note." }
        created_by_user_name: { type: string, example: "Jane Smith (Staff)" }
        created_at: { type: string, format: date-time, example: "2023-10-26T10:15:00Z" }
      required: [note_id, note_text, created_by_user_id, created_by_user_name, created_at]

    CheckinList:
      type: array
      description: A list of check-in details.
      items:
        $ref: '#/components/schemas/CheckinDetails'

    CheckinNoteConfirmation:
      type: object
      description: Confirmation of adding a check-in note.
      properties:
        note_id: { type: string, example: "note_def" }
        checkin_id: { type: string, example: "chk_123" }
        message: { type: string, example: "Note added successfully to check-in." }
      required: [note_id, checkin_id, message]

    AllocationDetails:
      type: object
      description: Detailed information about a single allocation.
      properties:
        allocation_id: { type: string, example: "alloc_001" }
        grant_id: { type: string, example: "grant_abc" }
        grant_name: { type: string, example: "Workforce Development Grant 2023" }
        department_id: { type: string, example: "dept_finance" }
        department_name: { type: string, example: "Finance Department" }
        amount: { type: number, format: float, example: 5000.00 }
        allocation_date: { type: string, format: date, example: "2023-07-01" }
        notes: { type: string, nullable: true, example: "Initial funding for Q3 projects." }
      required: [allocation_id, grant_id, grant_name, department_id, department_name, amount, allocation_date]

    AllocationList:
      type: array
      description: A list of allocation details.
      items:
        $ref: '#/components/schemas/AllocationDetails'

    ForumPostConfirmation:
      type: object
      description: Confirmation of creating a forum post.
      properties:
        post_id: { type: string, example: "post_ghi789" }
        topic_id: { type: string, example: "topic_gen_discussion" }
        title: { type: string, example: "New Training Opportunity" }
        message: { type: string, example: "Forum post created successfully." }
      required: [post_id, topic_id, title, message]

    ForumPostDetails:
      type: object
      description: Detailed information about a single forum post.
      properties:
        post_id: { type: string, example: "post_jkl012" }
        topic_id: { type: string, example: "topic_jobs" }
        topic_title: { type: string, example: "Job Opportunities" }
        user_id: { type: string, example: "user_client_123" }
        author_name: { type: string, example: "Alice Wonderland" }
        title: { type: string, example: "Looking for a Web Developer Role" }
        content: { type: string, example: "I have 5 years of experience..." }
        created_at: { type: string, format: date-time, example: "2023-11-01T14:30:00Z" }
        updated_at: { type: string, format: date-time, nullable: true, example: "2023-11-01T15:00:00Z" }
        reply_count: { type: integer, format: int32, example: 5 }
      required: [post_id, topic_id, topic_title, user_id, author_name, title, content, created_at, reply_count]

    ForumPostList:
      type: array
      description: A list of forum post details.
      items:
        $ref: '#/components/schemas/ForumPostDetails'

    ReportData:
      type: object
      description: >
        The structure of this object varies based on the 'report_type' requested.
        It typically contains a title, generation timestamp, parameters used, and the main content of the report.
      properties:
        title:
          type: string
          example: "Check-in Summary Report (Jan 2023)"
        generated_at:
          type: string
          format: date-time
          example: "2023-02-01T10:00:00Z"
        parameters:
          type: object
          description: Parameters used to generate this report.
          additionalProperties: true
          example: {"report_type": "checkin_summary", "start_date": "2023-01-01", "end_date": "2023-01-31"}
        content:
          type: object # Or array, depending on the report. Using object for flexibility.
          description: The main data of the report. Structure is report-specific.
          additionalProperties: true
          example: {"total_checkins": 150, "average_duration_minutes": 45, "by_site": [{"site_id": "site_001", "count": 100}]}
      required: [title, generated_at, parameters, content]

    ClientDetails:
      type: object
      description: Detailed information about a single client.
      properties:
        client_id: { type: string, example: "cli_mno345" }
        first_name: { type: string, example: "Robert" }
        last_name: { type: string, example: "Smith" }
        email: { type: string, format: email, example: "robert.smith@example.com" }
        phone: { type: string, nullable: true, example: "555-0101" }
        address: { type: string, nullable: true, example: "123 Main St" }
        city: { type: string, nullable: true, example: "Anytown" }
        state: { type: string, nullable: true, example: "AZ" }
        zip_code: { type: string, nullable: true, example: "85001" }
        registration_date: { type: string, format: date, example: "2022-05-15" }
        last_activity_date: { type: string, format: date, nullable: true, example: "2023-10-20" }
        status: { type: string, enum: [active, inactive, pending_verification], example: "active" }
        site_id: { type: string, nullable: true, example: "site_002", description: "Primary site associated with the client." }
        site_name: { type: string, nullable: true, example: "North Branch" }
        preferred_contact_method: { type: string, enum: [email, phone, mail], nullable: true, example: "email" }
      required: [client_id, first_name, last_name, email, registration_date, status]

    ClientList:
      type: array
      description: A list of client details.
      items:
        $ref: '#/components/schemas/ClientDetails'