openapi: 3.0.3
info:
  title: Arizona@Work Check-In System API
  description: API for interacting with the Arizona@Work Check-In System, providing access to check-ins, notes, allocations, forum posts, reports, and client data.
  version: 1.0.1 # Incremented version for client endpoint addition
servers:
  - url: /api/v1
    description: V1 API Base Path

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization # Primary method: Bearer <key>
      description: API Key authentication. Provide the key prefixed with 'Bearer ' in the 'Authorization' header, OR provide the key directly in the 'X-API-Key' header.
    ApiKeyAuthAlternative: # Define alternative for documentation clarity
      type: apiKey
      in: header
      name: X-API-Key
      description: Alternative API Key authentication. Provide the key directly in the 'X-API-Key' header.

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: A human-readable error message.
              example: "Check-in not found for ID: 999."
            code:
              type: string
              description: An optional internal error code string.
              example: "NOT_FOUND"
          required:
            - message

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: The current page number.
          example: 1
        limit:
          type: integer
          description: The number of records requested per page.
          example: 10
        total_records:
          type: integer
          description: The total number of records matching the query.
          example: 153
        total_pages:
          type: integer
          description: The total number of pages available.
          example: 16
      required:
        - page
        - limit
        - total_records
        - total_pages

    CheckinBase: # Base fields common to check-in responses
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the check-in record.
          readOnly: true
        site_id:
          type: integer
          format: int64
          description: ID of the site where the check-in occurred.
        first_name:
          type: string
          description: First name of the person checking in.
        last_name:
          type: string
          description: Last name of the person checking in.
        check_in_time:
          type: string
          format: date-time
          description: Timestamp when the check-in occurred.
        notified_staff_id:
          type: integer
          format: int64
          nullable: true
          description: ID of the staff member notified (if any).
        client_email:
          type: string
          format: email
          nullable: true
          description: Email address provided during check-in.
        client_id:
          type: integer
          format: int64
          nullable: true
          description: ID of the registered client account, if applicable (null for manual check-ins).
      required:
        - id
        - site_id
        - first_name
        - last_name
        - check_in_time

    CheckinFull: # Includes legacy q_* fields from check_ins table
      allOf:
        - $ref: '#/components/schemas/CheckinBase'
        - type: object
          properties:
            q_veteran:
              type: string
              nullable: true
              enum: ['Yes', 'No', 'Decline to Answer']
            q_age:
              type: string
              nullable: true
              enum: ['16-18', '19-24', '25-44', '45-54', '55-64', '65+', 'Decline to Answer']
            q_interviewing: # Example, add others as needed
              type: string
              nullable: true
              enum: ['Yes', 'No', 'Decline to Answer']
            # Add other q_* fields from schema if needed for full representation

    CheckinNote:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the check-in note.
          readOnly: true
        check_in_id:
          type: integer
          format: int64
          description: ID of the check-in this note is associated with.
        note_text:
          type: string
          description: The content of the note.
        created_by_user_id:
          type: integer
          format: int64
          nullable: true
          description: ID of the staff user who created the note (if applicable).
          readOnly: true
        created_by_api_key_id:
          type: integer
          format: int64
          nullable: true
          description: ID of the API key used to create the note (if applicable).
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Timestamp when the note was created.
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the note was soft-deleted (if applicable).
          readOnly: true
      required:
        - id
        - check_in_id
        - note_text
        - created_at

    Allocation:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the allocation record.
          readOnly: true
        budget_id:
          type: integer
          format: int64
          description: ID of the budget this allocation belongs to.
        transaction_date:
          type: string
          format: date
          description: Date of the allocation transaction.
        vendor_id:
          type: integer
          format: int64
          nullable: true
          description: ID of the associated vendor (if applicable).
        client_name:
          type: string
          nullable: true
          description: Name of the client associated with the allocation (if applicable).
        voucher_number:
          type: string
          nullable: true
          description: Voucher number for the allocation.
        enrollment_date:
          type: string
          format: date
          nullable: true
        class_start_date:
          type: string
          format: date
          nullable: true
        purchase_date:
          type: string
          format: date
          nullable: true
        payment_status:
          type: string
          enum: ['P', 'U', 'Void']
          description: Payment status (P=Paid, U=Unpaid, Void).
        program_explanation:
          type: string
          nullable: true
          description: Explanation of the program/service.
        # funding_* fields (DECIMAL) - Represent as number or string based on precision needs
        funding_dw:
          type: number
          format: float # Or string if exact decimal precision is critical
          nullable: true
        funding_dw_admin:
          type: number
          format: float
          nullable: true
        funding_dw_sus:
          type: number
          format: float
          nullable: true
        funding_adult:
          type: number
          format: float
          nullable: true
        funding_adult_admin:
          type: number
          format: float
          nullable: true
        funding_adult_sus:
          type: number
          format: float
          nullable: true
        funding_rr:
          type: number
          format: float
          nullable: true
        funding_h1b:
          type: number
          format: float
          nullable: true
        funding_youth_is:
          type: number
          format: float
          nullable: true
        funding_youth_os:
          type: number
          format: float
          nullable: true
        funding_youth_admin:
          type: number
          format: float
          nullable: true
        # fin_* fields
        fin_voucher_received:
          type: string
          nullable: true
        fin_accrual_date:
          type: string
          format: date
          nullable: true
        fin_obligated_date:
          type: string
          format: date
          nullable: true
        fin_comments:
          type: string
          format: text # Changed from text to string for OpenAPI compatibility
          nullable: true
        fin_expense_code:
          type: string
          nullable: true
        fin_processed_by_user_id:
          type: integer
          format: int64
          nullable: true
          readOnly: true
        created_by_user_id:
          type: integer
          format: int64
          nullable: true
          readOnly: true
        updated_by_user_id:
          type: integer
          format: int64
          nullable: true
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        # Fields joined from budgets table
        budget_name:
          type: string
          description: Name of the associated budget.
          readOnly: true
        fiscal_year_start:
          type: string
          format: date
          description: Start date of the budget's fiscal year.
          readOnly: true
        grant_id:
          type: integer
          format: int64
          description: ID of the grant associated with the budget.
          readOnly: true
        department_id:
          type: integer
          format: int64
          description: ID of the department associated with the budget.
          readOnly: true
        budget_owner_user_id: # Added for allocation_detail report
           type: integer
           format: int64
           nullable: true
           description: User ID of the budget owner.
           readOnly: true
      required:
        - id
        - budget_id
        - transaction_date
        - payment_status
        - created_at

    ForumPost:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the forum post.
          readOnly: true
        topic_id:
          type: integer
          format: int64
          description: ID of the forum topic this post belongs to.
        content:
          type: string
          description: The content of the forum post.
        user_id:
          type: integer
          format: int64
          nullable: true
          description: ID of the staff user who created the post (if applicable).
          readOnly: true
        created_by_api_key_id:
          type: integer
          format: int64
          nullable: true
          description: ID of the API key used to create the post (if applicable).
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Timestamp when the post was created.
          readOnly: true
      required:
        - id
        - topic_id
        - content
        - created_at

    ForumPostResponse:
      allOf:
        - $ref: '#/components/schemas/ForumPost'
        - type: object
          properties:
            topic_title:
              type: string
              description: Title of the forum topic the post belongs to.
              readOnly: true
              example: "General Discussion"
            author_full_name:
              type: string
              description: Full name of the user who created the post.
              readOnly: true
              example: "Jane Doe"
          required:
            - topic_title
            - author_full_name # Assuming these are always returned

    ForumPostListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ForumPostResponse'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination

    Client: # New Schema for Client Data
      type: object
      description: Represents a client record.
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the client.
          readOnly: true
        first_name:
          type: string
          description: Client's first name.
          example: "John"
        last_name:
          type: string
          description: Client's last name.
          example: "Doe"
        email:
          type: string
          format: email
          description: Client's email address.
          example: "john.doe@example.com"
        site_id:
          type: integer
          format: int64
          nullable: true
          description: ID of the client's primary associated site.
          example: 1
        client_qr_identifier:
          type: string
          format: uuid # Assuming UUID, adjust if different
          description: Unique identifier used for the client's QR code.
          readOnly: true
          example: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
        email_preference_jobs:
          type: boolean
          description: Indicates if the client opted-in to receive job-related emails (true=OptIn, false=OptOut).
          example: true
      required:
        - id
        - first_name
        - last_name
        - email
        - client_qr_identifier
        - email_preference_jobs

    ClientListResponse: # New Schema for List of Clients with Pagination
      type: object
      description: A paginated list of client records.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Client'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination

paths:
  /checkins/{checkin_id}:
    get:
      tags:
        - Checkins
      summary: Fetch Check-in Details
      description: Retrieves the details of a specific check-in record by its ID.
      operationId: getCheckinById
      parameters:
        - name: checkin_id
          in: path
          required: true
          description: The numeric ID of the check-in record to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: [] # Document alternative header
      responses:
        '200':
          description: Check-in details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckinFull' # Use the full schema including q_* fields
        '400':
          description: Bad Request - Invalid Check-in ID format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Invalid Check-in ID format. ID must be a positive integer."
                  code: "INVALID_ID_FORMAT"
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks required permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Permission denied. API key requires the 'read:checkin_data' permission."
                  code: "AUTH_FORBIDDEN"
        '404':
          description: Not Found - Check-in record with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Check-in not found for ID: 123."
                  code: "NOT_FOUND"
        '500':
          description: Internal Server Error - Database or unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while fetching check-in data."
                  code: "DB_EXECUTION_ERROR"

  /checkins/{checkin_id}/notes:
    post:
      tags:
        - Checkins
      summary: Add Check-in Note
      description: Adds a textual note to an existing check-in record.
      operationId: addCheckinNote
      parameters:
        - name: checkin_id
          in: path
          required: true
          description: The numeric ID of the check-in record to add a note to.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: The note content.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note_text:
                  type: string
                  description: The text content of the note.
                  example: "Client expressed interest in the upcoming workshop."
              required:
                - note_text
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: []
      responses:
        '201':
          description: Note created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckinNote'
        '400':
          description: Bad Request - Invalid Check-in ID format or missing note text.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidId:
                  summary: Invalid ID Format
                  value:
                    error:
                      message: "Invalid Check-in ID format. ID must be a positive integer."
                      code: "INVALID_ID_FORMAT"
                missingNote:
                  summary: Missing Note Text
                  value:
                    error:
                      message: "Request body must include 'note_text'."
                      code: "MISSING_PARAMETER"
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks required permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Permission denied. API key requires the 'create:checkin_note' permission."
                  code: "AUTH_FORBIDDEN"
        '404':
          description: Not Found - Check-in record with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Check-in not found for ID: 456."
                  code: "NOT_FOUND"
        '500':
          description: Internal Server Error - Database or unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while adding check-in note."
                  code: "DB_EXECUTION_ERROR"

  /allocations:
    get:
      tags:
        - Allocations
      summary: Query Allocations
      description: Retrieves a list of budget allocations based on specified filter criteria. Requires 'read:budget_allocations' permission.
      operationId: queryAllocations
      parameters:
        - name: fiscal_year
          in: query
          required: false
          description: Filter by fiscal year (e.g., 2024).
          schema:
            type: integer
        - name: grant_id
          in: query
          required: false
          description: Filter by grant ID.
          schema:
            type: integer
        - name: department_id
          in: query
          required: false
          description: Filter by department ID.
          schema:
            type: integer
        - name: budget_id
          in: query
          required: false
          description: Filter by budget ID.
          schema:
            type: integer
        - name: page
          in: query
          required: false
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          required: false
          description: Number of records per page.
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100 # Example maximum limit
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: []
      responses:
        '200':
          description: List of allocations retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Allocation'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - data
                  - pagination
        '400':
          description: Bad Request - Invalid filter parameter format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Invalid format for 'fiscal_year'. Must be an integer."
                  code: "INVALID_PARAMETER_FORMAT"
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks required permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Permission denied. API key requires the 'read:budget_allocations' permission."
                  code: "AUTH_FORBIDDEN"
        '500':
          description: Internal Server Error - Database or unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while querying allocations."
                  code: "DB_EXECUTION_ERROR"

  /forum/posts:
    get:
      tags:
        - Forum
      summary: Read All Forum Posts
      description: Retrieves a paginated list of all forum posts accessible to the API key. Requires 'read:all_forum_posts' permission.
      operationId: getAllForumPosts
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          required: false
          description: Number of posts per page.
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: []
      responses:
        '200':
          description: List of forum posts retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumPostListResponse'
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks required permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Permission denied. API key requires the 'read:all_forum_posts' permission."
                  code: "AUTH_FORBIDDEN"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while fetching forum posts."
                  code: "DB_EXECUTION_ERROR"
    post:
      tags:
        - Forum
      summary: Create Forum Post
      description: Creates a new post in a specified forum topic. Requires 'create:forum_post' permission.
      operationId: createForumPost
      requestBody:
        description: The details of the forum post to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic_id:
                  type: integer
                  format: int64
                  description: The ID of the topic to post in.
                  example: 5
                post_body:
                  type: string
                  description: The content of the forum post.
                  example: "This is a new post created via the API."
              required:
                - topic_id
                - post_body
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: []
      responses:
        '201':
          description: Forum post created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumPost' # Returns the created post object
        '400':
          description: Bad Request - Missing required fields, invalid topic ID, or invalid input format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingField:
                  summary: Missing Field
                  value:
                    error:
                      message: "Request body must include 'topic_id' and 'post_body'."
                      code: "MISSING_PARAMETER"
                invalidTopic:
                  summary: Invalid Topic ID
                  value:
                    error:
                      message: "Invalid Topic ID: 999 does not exist."
                      code: "INVALID_TOPIC_ID"
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks required permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Permission denied. API key requires the 'create:forum_post' permission."
                  code: "AUTH_FORBIDDEN"
        '404': # Added based on checkTopicExists fix
          description: Not Found - The specified topic_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Topic not found for ID: 999."
                  code: "NOT_FOUND"
        '500':
          description: Internal Server Error - Database or unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while creating forum post."
                  code: "DB_EXECUTION_ERROR"

  /forum/posts/recent:
    get:
      tags:
        - Forum
      summary: Read Recent Forum Posts
      description: Retrieves a list of the most recent forum posts accessible to the API key. Requires 'read:recent_forum_posts' permission.
      operationId: getRecentForumPosts
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of recent posts to return.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: []
      responses:
        '200':
          description: List of recent forum posts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ForumPostResponse' # Use the response schema including topic/author
                required:
                  - data
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks required permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Permission denied. API key requires the 'read:recent_forum_posts' permission."
                  code: "AUTH_FORBIDDEN"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while fetching recent forum posts."
                  code: "DB_EXECUTION_ERROR"

  /reports:
    get:
      tags:
        - Reports
      summary: Generate Reports
      description: Generates various reports based on the specified type and filters. Requires 'generate:reports' base permission, plus specific scope permissions based on the report type.
      operationId: generateReport
      parameters:
        - name: type
          in: query
          required: true
          description: Specifies the type of report to generate.
          schema:
            type: string
            enum: [checkin_detail, allocation_detail] # Add other report types as they are implemented
          example: checkin_detail
        - name: start_date
          in: query
          required: false
          description: Start date for the report data (YYYY-MM-DD).
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: false
          description: End date for the report data (YYYY-MM-DD).
          schema:
            type: string
            format: date
        - name: site_id # Applicable to checkin_detail with read:all_checkin_data
          in: query
          required: false
          description: Filter check-in reports by site ID (requires 'read:all_checkin_data' permission).
          schema:
            type: integer
        - name: department_id # Applicable to allocation_detail with read:all_allocation_data
          in: query
          required: false
          description: Filter allocation reports by department ID (requires 'read:all_allocation_data' permission).
          schema:
            type: integer
        - name: grant_id # Applicable to allocation_detail with read:all_allocation_data
          in: query
          required: false
          description: Filter allocation reports by grant ID (requires 'read:all_allocation_data' permission).
          schema:
            type: integer
        - name: budget_id # Applicable to allocation_detail with read:all_allocation_data
          in: query
          required: false
          description: Filter allocation reports by budget ID (requires 'read:all_allocation_data' permission).
          schema:
            type: integer
        - name: user_id # Applicable to allocation_detail with read:all_allocation_data
          in: query
          required: false
          description: Filter allocation reports by budget owner user ID (requires 'read:all_allocation_data' permission).
          schema:
            type: integer
        - name: page
          in: query
          required: false
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          required: false
          description: Number of records per page.
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: []
      responses:
        '200':
          description: Report generated successfully. The structure depends on the 'type' parameter.
          content:
            application/json:
              schema:
                oneOf: # Use oneOf to indicate different possible response structures
                  - $ref: '#/components/schemas/CheckinReportResponse' # Define this schema below
                  - $ref: '#/components/schemas/AllocationReportResponse' # Define this schema below
              examples:
                checkinReportExample:
                  summary: Example Check-in Detail Report Response
                  value:
                    report_type: "checkin_detail"
                    generated_at: "2024-05-01T10:30:00Z"
                    filters:
                      start_date: "2024-04-01"
                      end_date: "2024-04-30"
                    data:
                      - id: 101
                        site_id: 1
                        first_name: "Jane"
                        last_name: "Smith"
                        check_in_time: "2024-04-15T09:05:10Z"
                        client_id: 55
                        # ... other checkin fields
                      # ... more checkin records
                    pagination:
                      page: 1
                      limit: 50
                      total_records: 75
                      total_pages: 2
                allocationReportExample:
                  summary: Example Allocation Detail Report Response
                  value:
                    report_type: "allocation_detail"
                    generated_at: "2024-05-01T10:35:00Z"
                    filters:
                      fiscal_year: 2024
                      department_id: 2
                    data:
                      - id: 205
                        budget_id: 15
                        transaction_date: "2024-04-20"
                        vendor_id: 8
                        client_name: "Workshop Attendee"
                        payment_status: "P"
                        funding_dw: 150.00
                        # ... other allocation fields
                      # ... more allocation records
                    pagination:
                      page: 1
                      limit: 50
                      total_records: 30
                      total_pages: 1
        '400':
          description: Bad Request - Missing 'type' parameter, invalid 'type', or invalid filter format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingType:
                  summary: Missing Type Parameter
                  value:
                    error:
                      message: "Required query parameter 'type' is missing."
                      code: "MISSING_PARAMETER"
                invalidType:
                  summary: Invalid Report Type
                  value:
                    error:
                      message: "Invalid report type specified: 'invalid_report'. Allowed types: checkin_detail, allocation_detail."
                      code: "INVALID_PARAMETER_VALUE"
                invalidDate:
                  summary: Invalid Date Format
                  value:
                    error:
                      message: "Invalid format for 'start_date'. Use YYYY-MM-DD."
                      code: "INVALID_PARAMETER_FORMAT"
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks 'generate:reports' permission or required scope permission (e.g., 'read:all_checkin_data', 'read:site_checkin_data', 'read:all_allocation_data', 'read:own_allocation_data') or associated ID is missing/invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBasePermission:
                  summary: Missing Base Permission
                  value:
                    error:
                      message: "Permission denied. API key requires the 'generate:reports' permission."
                      code: "AUTH_FORBIDDEN"
                missingScopePermission:
                  summary: Missing Scope Permission
                  value:
                    error:
                      message: "Permission denied. API key requires 'read:all_checkin_data' or 'read:site_checkin_data' scope for 'checkin_detail' report."
                      code: "AUTH_FORBIDDEN_SCOPE"
                missingAssociatedId:
                  summary: Missing Associated ID
                  value:
                    error:
                      message: "Permission scope 'read:site_checkin_data' requires an associated_site_id on the API key."
                      code: "AUTH_MISSING_ASSOCIATED_ID"
        '500':
          description: Internal Server Error - Database or unexpected error during report generation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while generating the report."
                  code: "DB_EXECUTION_ERROR"

  # --- NEW CLIENT ENDPOINTS ---
  /clients:
    get:
      tags:
        - Clients
      summary: List Clients
      description: Retrieves a paginated list of clients, optionally filtered by name, email, or QR identifier. Requires 'read:client_data' permission. Filters are applied using simple substring matching (LIKE '%value%').
      operationId: listClients
      parameters:
        - name: name
          in: query
          required: false
          description: Filter clients by first OR last name (case-insensitive substring match). For an AND search on both first and last name, use the 'firstName' and 'lastName' parameters instead.
          schema:
            type: string
          example: "Doe"
        - name: firstName # New parameter
          in: query
          required: false
          description: Filter clients by first name (substring match). Use with lastName for AND search.
          schema:
            type: string
          example: "John"
        - name: lastName # New parameter
          in: query
          required: false
          description: Filter clients by last name (substring match). Use with firstName for AND search.
          schema:
            type: string
          example: "Smith"
        - name: email
          in: query
          required: false
          description: Filter clients by email address (case-insensitive substring match).
          schema:
            type: string
            format: email
          example: "example.com"
        - name: qr_identifier
          in: query
          required: false
          description: Filter clients by their exact QR identifier.
          schema:
            type: string
            format: uuid # Assuming UUID
          example: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
        - name: page
          in: query
          required: false
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          required: false
          description: Number of clients per page.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: []
      responses:
        '200':
          description: A paginated list of clients retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientListResponse'
        '400':
          description: Bad Request - Invalid filter parameter format (e.g., non-integer page/limit).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Invalid format for 'page'. Must be a positive integer."
                  code: "INVALID_PARAMETER_FORMAT"
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks required 'read:client_data' permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Permission denied. API key requires the 'read:client_data' permission."
                  code: "AUTH_FORBIDDEN"
        '500':
          description: Internal Server Error - Database or unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while fetching client list."
                  code: "DB_EXECUTION_ERROR"

  /clients/{client_id}:
    get:
      tags:
        - Clients
      summary: Get Client by ID
      description: Retrieves the details of a specific client by their unique ID. Requires 'read:client_data' permission.
      operationId: getClientById
      parameters:
        - name: client_id
          in: path
          required: true
          description: The numeric ID of the client to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      security:
        - ApiKeyAuth: []
        - ApiKeyAuthAlternative: []
      responses:
        '200':
          description: Client details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Bad Request - Invalid Client ID format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Invalid Client ID format. ID must be a positive integer."
                  code: "INVALID_ID_FORMAT"
        '401':
          description: Unauthorized - Invalid or missing API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Authentication failed. Invalid or missing API Key."
                  code: "AUTH_FAILED"
        '403':
          description: Forbidden - API Key lacks required 'read:client_data' permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Permission denied. API key requires the 'read:client_data' permission."
                  code: "AUTH_FORBIDDEN"
        '404':
          description: Not Found - Client with the specified ID does not exist or is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Client not found for ID: 789."
                  code: "NOT_FOUND"
        '500':
          description: Internal Server Error - Database or unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Database error occurred while fetching client data."
                  code: "DB_EXECUTION_ERROR"

# --- Helper Schemas for Report Responses ---
components: # Add these under the main components section if not already there
  schemas:
    # ... existing schemas ...
    CheckinReportResponse:
      type: object
      properties:
        report_type:
          type: string
          enum: [checkin_detail]
        generated_at:
          type: string
          format: date-time
        filters:
          type: object # Define specific filter properties if needed
          additionalProperties: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/CheckinFull' # Use the full checkin schema
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - report_type
        - generated_at
        - data
        - pagination

    AllocationReportResponse:
      type: object
      properties:
        report_type:
          type: string
          enum: [allocation_detail]
        generated_at:
          type: string
          format: date-time
        filters:
          type: object
          additionalProperties: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Allocation' # Use the detailed allocation schema
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - report_type
        - generated_at
        - data
        - pagination
# Ensure indentation is correct if merging this back into the main components/schemas section